// –∏–º—è –ø–∞—Ä–æ–ª—å –≤–∞—à–µ–π –¥–æ–º–∞—à–Ω–µ–π —Å–µ—Ç–∏
// –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏, –ø–æ–¥–∫–ª—é—á–∏–≤—à–∏—Å—å –∫ ESP AP c –ø–∞—Ä–æ–ª–µ–º 1234567890
#define WIFI "Vodafone-946c+ "
#define WIFIPASS "19191919"
#define INDIKATOR 8         // –Ω–∞ –∫–∞–∫–æ–º –ø–∏–Ω–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥
 






#include <Arduino.h>
#include "timer.h"
#include "led.h"
#ifdef ESP8266
#include <ESP8266WiFi.h>
#else
#include <WiFi.h>
#endif

#include <GyverDBFile.h>
#include <LittleFS.h>
GyverDBFile db(&LittleFS, "/nicelight.db"); // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

#include <SettingsGyver.h>
    // –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –º—Å. 0 —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å !!!!!!!!!!!!!!!!!!!!
    uint16_t updateTout = 2500;
#include <WiFiConnector.h>
SettingsGyver sett("ü™ü", &db);// —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö


#include <GyverNTP.h>

//–æ–±—è–≤–ª–µ–Ω–∏–µ —Ñ–∫–Ω—Ü–∏–π –¥–ª—è –∏—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–∑ –≤–∫–ª–∞–¥–æ–∫.
void build(sets::Builder& b);
void update(sets::Updater& upd);



// –∫–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–∏ –∂–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª–µ–π –¥–ª—è –≤–µ–± –º–æ—Ä–¥—ã
enum kk : size_t {
    wifi_ssid,
    wifi_pass,
    lbl1,      
    timeOpen,  
    timeClose, 
    motorRunTime,
    btnOpen,    
    btnClose,  
    apply,
    blinds_status,     // –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∂–∞–ª—é–∑–∏
    datetime_display // –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
};

struct Data {
  uint32_t secondsNow = 0;
  String dateTimeStr = ""; 
  String blindsStatus = "–ó–∞–∫—Ä—ã—Ç—ã";
  bool isBlindsMoving = false;    // –§–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è –∂–∞–ª—é–∑–∏
  bool isBlindsOpen = false;      // –§–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
};
Data data;

Timer each60Sec(60000); // —Ç–∞–π–º–µ—Ä —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

LED indikator(INDIKATOR, 300, 3, 50, 20); //–∫–∞–∂–¥—ã–µ 1000 –º–∏–ª–∏—Å–µ–∫ –º–∏–≥–∞–µ–º 3 —Ä–∞–∑–∞ –∫–∞–∂–¥—ã—Ö 50 –º—Å, –≤—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è 20 –º—Å–µ–∫

int valNum;
uint32_t startSeconds = 0;
uint32_t stopSeconds = 0;
bool notice_f; // —Ñ–ª–∞–≥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ wifi
byte initially = 10; // –ø–µ—Ä–≤—ã—Ö 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
 


// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–º =====
const int IN1 = 0;  // –ü–∏–Ω –º–æ—Ç–æ—Ä–∞
const int IN2 = 1;  // –ü–∏–Ω –º–æ—Ç–æ—Ä–∞
unsigned long motorTime = 5000; // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
unsigned long startTime = 0;
bool timerActive = false;

// ===== –ü–∏–Ω—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ =====
const int buttonOpenPin = 5;
const int buttonClosePin = 7;

// ===== –î—Ä–µ–±–µ–∑–≥ –∫–Ω–æ–ø–æ–∫ =====
bool openButtonState = false;
bool closeButtonState = false;
unsigned long lastDebounceTimeOpen = 0;
unsigned long lastDebounceTimeClose = 0;
const unsigned long debounceDelay = 50; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥—Ä–µ–±–µ–∑–≥–∞

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ =====
unsigned long timeToOpen = 0;
unsigned long timeToClose = 0;

// ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º =====
void handleOpenButton() {
  if (timerActive || data.isBlindsMoving || data.isBlindsOpen) return;
  
  data.isBlindsMoving = true;
  data.blindsStatus = "–û—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è";
  
  Serial.println("–û—Ç–∫—Ä—ã—Ç–∏–µ");
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  startTime = millis();
  timerActive = true;
}

void handleCloseButton() {
  if (timerActive || data.isBlindsMoving || !data.isBlindsOpen) return;
  
  data.isBlindsMoving = true;
  data.blindsStatus = "–ó–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è";
  
  Serial.println("–ó–∞–∫—Ä—ã—Ç–∏–µ");
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  startTime = millis();
  timerActive = true;
}

void checkTimer() {
  if (!timerActive) return;

  if (millis() - startTime >= motorTime) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    Serial.println("–ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    data.isBlindsMoving = false;
    if (data.blindsStatus == "–û—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è") {
      data.isBlindsOpen = true;
      data.blindsStatus = "–û—Ç–∫—Ä—ã—Ç—ã";
    } else {
      data.isBlindsOpen = false;
      data.blindsStatus = "–ó–∞–∫—Ä—ã—Ç—ã";
    }
    
    timerActive = false;
  }
}





// ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ =====
void handleButtons() {
  unsigned long currentMillis = millis();

  bool readingOpen = !digitalRead(buttonOpenPin);
  if (readingOpen != openButtonState) {
    if (currentMillis - lastDebounceTimeOpen > debounceDelay) {
      lastDebounceTimeOpen = currentMillis;
      openButtonState = readingOpen;
      if (openButtonState) handleOpenButton();
    }
  }

  bool readingClose = !digitalRead(buttonClosePin);
  if (readingClose != closeButtonState) {
    if (currentMillis - lastDebounceTimeClose > debounceDelay) {
      lastDebounceTimeClose = currentMillis;
      closeButtonState = readingClose;
      if (closeButtonState) handleCloseButton();
    }
  }
}













// –±–∏–ª–¥–µ—Ä! –¢—É—Ç —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞—à–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫



void setup() {
  Serial.begin(115200);
  Serial.println();

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(buttonOpenPin, INPUT_PULLUP);
  pinMode(buttonClosePin, INPUT_PULLUP);

  // ======== SETTINGS ========
  WiFi.mode(WIFI_AP_STA);
  

  
  sett.begin();
  sett.onBuild(build);
  sett.onUpdate(update);




  // ======== DATABASE ========
 #ifdef ESP32
  LittleFS.begin(true);
 #else
  LittleFS.begin();
 #endif
  db.begin();
  db.init(kk::wifi_ssid, "Vodafone-946C_plus");
  db.init(kk::wifi_pass, "19191919");
  db.init(kk::datetime_display, "");
  db.init(kk::motorRunTime, 5000);
  db.init(kk::timeOpen, 8*3600);   // 08:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  db.init(kk::timeClose, 20*3600); // 20:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  db.init(kk::blinds_status, "–ó–∞–∫—Ä—ã—Ç—ã"); // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  motorTime = db[kk::motorRunTime].toInt();
  timeToOpen = db[kk::timeOpen].toInt();
  timeToClose = db[kk::timeClose].toInt();

  
  // ======== WIFI ========
  // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É
  WiFiConnector.setPass("1234567890"); // –ø–∞—Ä–æ–ª—å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  WiFiConnector.setTimeout(20); // —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—Ç—Å—è
  WiFiConnector.onConnect([]() {
    Serial.print("Connected! ");
    Serial.println(WiFi.localIP());
    indikator.setPeriod(3000, 1, 200, 150); //—Ä–∞–∑ –≤ 000 —Å–µ–∫, 0 —Ä–∞–∑ –≤–∑–º–∏–≥–Ω–µ–º - –ø–æ 00 –º–∏–ª–∏—Å–µ–∫ –ø–µ—Ä–∏–æ–¥—ã, –≥–æ—Ä–µ—Ç—å –±—É–¥–µ–º 0 –º–∏–ª–∏—Å–µ–∫
  });
  WiFiConnector.onError([]() {
    Serial.print("Error! start AP ");
    Serial.println(WiFi.softAPIP());
    indikator.setPeriod(600, 2, 100, 50); //—Ä–∞–∑ –≤  —Å–µ–∫—É–Ω–¥—É –¥–≤–∞ —Ä–∞–∑–∞ –≤–∑–º–∏–≥–Ω–µ–º - –ø–æ 200 –º–∏–ª–∏—Å–µ–∫, –≥–æ—Ä–µ—Ç—å –±—É–¥–µ–º 50 –º–∏–ª–∏—Å–µ–∫

  });

  WiFiConnector.connect(db[kk::wifi_ssid], db[kk::wifi_pass]);

  NTP.begin(1); // —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –û–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ä–∞–∑ –≤ 100 —Å–µ–∫
  NTP.setPeriod(100); // –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–∑ –≤ 100 —Å–µ–∫


}//setup

void updateDateTime() {
  if (NTP.online()) {
    data.dateTimeStr = NTP.dateToString() + " " + NTP.timeToString();
  } else {
    data.dateTimeStr = "NTP disconnected";
  }
}




void loop() {
  WiFiConnector.tick();
  sett.tick();
  NTP.tick();
  indikator.tick();
  
  handleButtons();
  checkTimer();


  if (each60Sec.ready()) {
    updateDateTime();
  }

  if (NTP.newSecond()) {
    data.secondsNow = NTP.daySeconds();
    checkAutoActions();
  }
}

void checkAutoActions() {

  static uint32_t lastOpen = 0;
  static uint32_t lastClose = 0;
  
  // –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
  if (data.secondsNow >= timeToOpen && 
      data.secondsNow - timeToOpen < 60 && 
      lastOpen != timeToOpen &&
      !data.isBlindsOpen &&      // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∂–∞–ª—é–∑–∏ –∑–∞–∫—Ä—ã—Ç—ã
      !data.isBlindsMoving) {    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏
    
    handleOpenButton();
    lastOpen = timeToOpen;
  }
  
  // –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  if (data.secondsNow >= timeToClose && 
      data.secondsNow - timeToClose < 60 && 
      lastClose != timeToClose &&
      data.isBlindsOpen &&       // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∂–∞–ª—é–∑–∏ –æ—Ç–∫—Ä—ã—Ç—ã
      !data.isBlindsMoving) {    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏
    
    handleCloseButton();
    lastClose = timeToClose;
  }
}

  

